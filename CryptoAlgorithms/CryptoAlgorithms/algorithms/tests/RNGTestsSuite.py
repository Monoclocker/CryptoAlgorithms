import unittest
from CryptoAlgorithms.algorithms.RNG import RNG

#Тесты для генератора случайных чисел
class RNGTestSuite(unittest.TestSuite):
    def __init__(self):
        super(RNGTestSuite, self).__init__([
            NextGeneratedNumberShouldBeNotEqualToCurrentNumber(),
            SequenceGeneratedManuallyShouldBeEqualToAutoGeneratedSequenceNumber(),
            Mod4Of_a_ParameterShouldEqualsTo1(),
            Parameter_b_ShouldBeLowerThan_m_Constant(),
            Parameter_c0_ShouldBeLowerThan_m_Constant()
        ])

class NextGeneratedNumberShouldBeNotEqualToCurrentNumber(unittest.TestCase):
    def runTest(self):
        rng = RNG()
        next_val = rng.generate(rng.c_0)
        self.assertNotEqual(next_val, rng.c_0)

class SequenceGeneratedManuallyShouldBeEqualToAutoGeneratedSequenceNumber(unittest.TestCase):
    def runTest(self):
        rng = RNG()
        manually_generated_seq = [rng.c_0]
        seq_length = 10
        for i in range(seq_length):
            manually_generated_seq.append(rng.generate(manually_generated_seq[i]))
        autogenerated_seq = rng.generate_sequence(seq_length)
        self.assertListEqual(manually_generated_seq[1::], autogenerated_seq)

class Mod4Of_a_ParameterShouldEqualsTo1(unittest.TestCase):
    def runTest(self):
        rng = RNG()
        self.assertEqual(rng.a % 4, 1)

class Parameter_b_ShouldBeLowerThan_m_Constant(unittest.TestCase):
    def runTest(self):
        rng = RNG()
        self.assertLess(rng.b, rng.m)

class Parameter_c0_ShouldBeLowerThan_m_Constant(unittest.TestCase):
    def runTest(self):
        rng = RNG()
        self.assertLess(rng.c_0, rng.m)